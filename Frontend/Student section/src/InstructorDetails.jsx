import React, { useState, useEffect } from 'react';

// Modal for looking up an instructor by ID to edit
function EditLookupModal({ show, onClose, onFind }) {
  const [id, setId] = useState('');

  // BUG FIX: This effect resets the input field whenever the modal becomes visible.
  useEffect(() => {
    if (show) {
      setId('');
    }
  }, [show]);

  if (!show) return null;

  return (
    <div className="fixed inset-0 bg-gray-500/50 flex justify-center items-center z-50">
      <div className="bg-white rounded-lg shadow-xl p-8 relative w-full max-w-sm flex flex-col gap-4">
        <button onClick={onClose} className="absolute top-3 right-4 text-gray-500 hover:text-gray-800 text-3xl cursor-pointer">&times;</button>
        <h3 className="text-xl font-semibold text-center text-gray-800">Edit Instructor</h3>
        <div>
            <label className="text-sm text-gray-600">Instructor ID (Autogenerated)</label>
            <input
                type="text"
                placeholder="Enter here..."
                value={id}
                onChange={(e) => setId(e.target.value)}
                className="mt-1 p-2.5 text-base rounded-md border border-gray-300 w-full"
            />
        </div>
        <button
            onClick={() => { onFind(id); onClose(); }}
            className="w-full bg-green-600 hover:bg-green-700 text-white py-2 px-4 rounded-md text-sm"
        >
            Ok
        </button>
      </div>
    </div>
  );
}

// Modal component for Add/Edit Form
function InstructorFormModal({ show, onClose, onSave, initialData }) {
  const [form, setForm] = useState(
    initialData || { firstName: '', lastName: '', email: '', phone: '' }
  );

  useEffect(() => {
    setForm(initialData || { firstName: '', lastName: '', email: '', phone: '' });
  }, [initialData, show]);

  if (!show) return null;

  const handleChange = e => {
    const { name, value } = e.target;
    setForm({ ...form, [name]: value });
  };

  const handleSave = () => {
    if (form.firstName && form.email && form.phone) {
      onSave(form);
    } else {
      alert('Please fill in at least First Name, Email, and Phone Number.');
    }
  };

  const handleReset = () => {
    setForm(initialData || { firstName: '', lastName: '', email: '', phone: '' });
  };

  return (
    <div className="fixed inset-0 bg-gray-500/50 flex justify-center items-center z-50">
      <div className="bg-white rounded-lg shadow-xl relative w-full max-w-md">
        <h3 className="text-lg font-semibold bg-gray-100 text-gray-800 p-4 border-b border-gray-200 rounded-t-lg">
          {initialData ? 'Edit Instructor Details' : 'Enter New Instructor Details'}
        </h3>
        <button onClick={onClose} className="absolute top-3 right-4 text-gray-500 hover:text-gray-800 text-3xl cursor-pointer">&times;</button>

        <div className="p-5 flex flex-col gap-4">
          <div>
            <label className="text-sm text-gray-600">First Name</label>
            <input name="firstName" placeholder="First Name here..." value={form.firstName} onChange={handleChange} className="mt-1 p-2.5 text-base rounded-md border border-gray-300 w-full" />
          </div>
          <div>
            <label className="text-sm text-gray-600">Last Name</label>
            <input name="lastName" placeholder="Last Name here..." value={form.lastName} onChange={handleChange} className="mt-1 p-2.5 text-base rounded-md border border-gray-300 w-full" />
          </div>
          <div>
            <label className="text-sm text-gray-600">Email</label>
            <input name="email" type="email" placeholder="example@email.com" value={form.email} onChange={handleChange} className="mt-1 p-2.5 text-base rounded-md border border-gray-300 w-full" />
          </div>
          <div>
            <label className="text-sm text-gray-600">Phone Number</label>
            <input name="phone" type="tel" placeholder="9876543210" value={form.phone} onChange={handleChange} className="mt-1 p-2.5 text-base rounded-md border border-gray-300 w-full" />
          </div>
        </div>
        
        <div className="p-4 flex justify-end gap-3 border-t border-gray-200 bg-gray-50 rounded-b-lg">
          <button onClick={handleReset} className="bg-blue-600 hover:bg-blue-700 text-white py-2 px-4 rounded-md text-sm">Reset</button>
          <button onClick={handleSave} className="bg-green-600 hover:bg-green-700 text-white py-2 px-4 rounded-md text-sm">Save</button>
        </div>
      </div>
    </div>
  );
}

// Main Component
export default function InstructorDetails() {
  const [instructors, setInstructors] = useState([
    {
      id: 1,
      instructorId: '6111664552',
      firstName: 'Praful',
      lastName: '',
      email: 'prafull@gmail.com',
      phone: '6569668693'
    }
  ]);
  const [showFormModal, setShowFormModal] = useState(false);
  const [showLookupModal, setShowLookupModal] = useState(false);
  const [editIdx, setEditIdx] = useState(null);

  const handleSave = data => {
    if (editIdx === null) {
      setInstructors([
        ...instructors,
        {
          id: instructors.length ? Math.max(...instructors.map(i => i.id)) + 1 : 1,
          instructorId: (Math.random() * 1e9 | 0).toString(),
          ...data
        }
      ]);
    } else {
      setInstructors(instructors.map((inst, idx) =>
        idx === editIdx ? { ...inst, ...data } : inst
      ));
    }
    setShowFormModal(false);
    setEditIdx(null);
  };

  const handleDelete = idx => {
    if (window.confirm('Are you sure you want to delete this instructor?')) {
        setInstructors(instructors.filter((_, i) => i !== idx));
    }
  };

  const openAddModal = () => {
    setEditIdx(null);
    setShowFormModal(true);
  };

  const handleLookupAndEdit = (idToFind) => {
    if (!idToFind) {
        alert("Please enter an Instructor ID.");
        return;
    }
    const idx = instructors.findIndex(inst => inst.instructorId === idToFind);
    if (idx !== -1) {
        setEditIdx(idx);
        setShowFormModal(true);
    } else {
        alert(`Instructor with ID "${idToFind}" not found.`);
    }
  };

  const handleTableReset = () => {
    setInstructors([]);
  };
  const handleTableSave = () => {
    alert('Instructors "saved" (simulating a backend API call).');
  };

  return (
    <div className="bg-gray-100 min-h-screen font-sans text-gray-800">
      <header className="flex justify-between items-center py-4 px-8 border-b border-gray-200 bg-white text-gray-600">
        <h1 className="text-2xl font-bold text-gray-900">CDAC ACTS</h1>
        <nav className="flex items-center gap-6 text-sm">
            <a href="#" className="hover:text-blue-600">Dashboard</a>
            <a href="#" className="hover:text-blue-600">Timetable</a>
            <a href="#" className="text-blue-600 font-bold border-b-2 border-blue-600 pb-1">Marks</a>
            <a href="#" className="hover:text-blue-600">Feedback</a>
            <a href="#" className="hover:text-blue-600">Attendance</a>
            <a href="#" className="hover:text-blue-600">Students</a>
        </nav>
        <img src="https://i.pravatar.cc/40" alt="profile" className="rounded-full"/>
      </header>

      <main className="p-8">
        <div className="bg-white rounded-lg p-6 border border-gray-200">
            <div className="mb-6">
                <h2 className="text-2xl font-semibold text-gray-900">Instructor Details</h2>
                <p className="text-gray-500">
                    {new Date().toLocaleDateString('en-US', { month: 'long', day: 'numeric', year: 'numeric' })}
                </p>
            </div>
            
            <div className="mb-6 flex gap-2">
              <button onClick={openAddModal} className="bg-blue-600 hover:bg-blue-700 text-white py-2 px-4 rounded-md text-sm">Register New Instructor</button>
              <button onClick={() => setShowLookupModal(true)} className="bg-green-600 hover:bg-green-700 text-white py-2 px-4 rounded-md text-sm">Edit Instructor by ID</button>
            </div>

            <div className="overflow-x-auto">
              <table className="w-full text-sm">
                <thead className="bg-gray-100">
                  <tr>
                    <th className="p-3 text-left font-semibold text-gray-600 border border-gray-200">Sr. No.</th>
                    <th className="p-3 text-left font-semibold text-gray-600 border border-gray-200">Instructor ID</th>
                    <th className="p-3 text-left font-semibold text-gray-600 border border-gray-200">Instructor Name</th>
                    <th className="p-3 text-left font-semibold text-gray-600 border border-gray-200">Email</th>
                    <th className="p-3 text-left font-semibold text-gray-600 border border-gray-200">Phone No</th>
                    <th className="p-3 text-left font-semibold text-gray-600 border border-gray-200">Delete</th>
                  </tr>
                </thead>
                <tbody className="divide-y divide-gray-200">
                  {instructors.map((inst, idx) => (
                    <tr key={inst.id} className="hover:bg-gray-50">
                      <td className="p-3 border-l border-r border-gray-200">{idx + 1}</td>
                      <td className="p-3 border-l border-r border-gray-200">{inst.instructorId}</td>
                      <td className="p-3 border-l border-r border-gray-200">{[inst.firstName, inst.lastName].filter(Boolean).join(' ')}</td>
                      <td className="p-3 border-l border-r border-gray-200">{inst.email}</td>
                      <td className="p-3 border-l border-r border-gray-200">{inst.phone}</td>
                      <td className="p-3 border-l border-r border-gray-200">
                        <button onClick={() => handleDelete(idx)} className="bg-red-600 hover:bg-red-700 text-white py-1 px-3 rounded-md flex items-center text-xs">
                          <span className="mr-1.5">&#10006;</span> Delete
                        </button>
                      </td>
                    </tr>
                  ))}
                  {Array.from({ length: Math.max(0, 5 - instructors.length) }).map((_, i) => (
                    <tr key={`empty-${i}`} className="h-12">
                      <td className="p-3 border-l border-r border-b border-gray-200">{instructors.length + i + 1}</td>
                      <td className="p-3 border-l border-r border-b border-gray-200" colSpan={5}></td>
                    </tr>
                  ))}
                </tbody>
              </table>
            </div>

            <div className="mt-6 flex gap-2">
              <button onClick={handleTableReset} className="bg-blue-600 hover:bg-blue-700 text-white py-2 px-4 rounded-md text-sm">Reset</button>
              <button onClick={handleTableSave} className="bg-green-600 hover:bg-green-700 text-white py-2 px-4 rounded-md text-sm">Save</button>
            </div>
        </div>
      </main>

      <InstructorFormModal
        show={showFormModal}
        onClose={() => { setShowFormModal(false); setEditIdx(null); }}
        onSave={handleSave}
        initialData={editIdx !== null ? instructors[editIdx] : null}
      />

      <EditLookupModal
        show={showLookupModal}
        onClose={() => setShowLookupModal(false)}
        onFind={handleLookupAndEdit}
      />
    </div>
  );
}
