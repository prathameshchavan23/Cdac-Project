import React, { useState, useMemo } from 'react';
import { Edit, X, UserPlus, CheckCircle, AlertTriangle } from 'lucide-react';

// --- Mock Data ---
const initialAdmins = [
    { id: 'AD12345', firstName: 'Swati', lastName: 'Salunkhe', email: 'swats69@gmail.com', departmentId: '69', phone: '6969696969', dob: '1990-01-01', address: '123 Tech Park, Pune' },
    { id: 'AD67890', firstName: 'Raj', lastName: 'Patel', email: 'raj.patel@example.com', departmentId: '20', phone: '9876543210', dob: '1985-05-10', address: '456 Silicon Valley, Mumbai' },
];

// --- Reusable Modal Component ---
const Modal = ({ isOpen, onClose, children, size = 'md' }) => {
    if (!isOpen) return null;
    const sizeClasses = { sm: 'max-w-md', md: 'max-w-lg', lg: 'max-w-2xl' };
    return (
        <div className="fixed inset-0 bg-black bg-opacity-60 flex justify-center items-center z-50 p-4">
            <div className={`bg-white rounded-2xl shadow-xl w-full ${sizeClasses[size]} transform transition-all duration-300`}>
                <div className="text-right p-2">
                    <button onClick={onClose} className="text-gray-400 hover:text-gray-600 p-2 rounded-full transition-colors">
                        <X size={24} />
                    </button>
                </div>
                <div className="px-6 pb-6 -mt-4">{children}</div>
            </div>
        </div>
    );
};

// --- Status/Result Modal ---
const StatusModal = ({ isOpen, onClose, success, title, message, id, errorCode }) => {
    if (!isOpen) return null;
    return (
        <Modal isOpen={isOpen} onClose={onClose} size="sm">
            <div className="text-center">
                {success ? <CheckCircle size={48} className="mx-auto text-green-500 mb-4" /> : <AlertTriangle size={48} className="mx-auto text-red-500 mb-4" />}
                <h3 className="text-2xl font-bold text-gray-800 mb-2">{title}</h3>
                {message && <p className="text-gray-600 mb-4">{message}</p>}
                <div className="bg-gray-100 border border-gray-200 rounded-lg p-3 my-4">
                    <label className="text-sm font-semibold text-gray-500">{success ? 'Admin ID (Autogenerated)' : 'Error Code'}</label>
                    <p className="text-lg font-mono text-gray-800 mt-1">{success ? id : errorCode}</p>
                </div>
                <button onClick={onClose} className={`w-full px-6 py-3 font-bold text-white rounded-lg shadow-md transition ${success ? 'bg-green-600 hover:bg-green-700' : 'bg-red-600 hover:bg-red-700'}`}>
                    OK
                </button>
            </div>
        </Modal>
    );
};


// --- Admin Form Component (for Add/Edit) ---
const AdminForm = ({ initialData, onSave, onCancel, isEdit = false }) => {
    const [formData, setFormData] = useState(
        initialData || { firstName: '', lastName: '', email: '', password: '', departmentId: '', phone: '', dob: '', address: '' }
    );
    const originalData = useMemo(() => initialData || { firstName: '', lastName: '', email: '', password: '', departmentId: '', phone: '', dob: '', address: '' }, [initialData]);

    const handleChange = (e) => {
        const { name, value } = e.target;
        setFormData(prev => ({ ...prev, [name]: value }));
    };

    const handleReset = () => setFormData(originalData);
    const handleSubmit = (e) => { e.preventDefault(); onSave(formData); };

    return (
        <form onSubmit={handleSubmit} className="space-y-4">
            <h3 className="text-xl font-bold text-center text-gray-800 mb-4">{isEdit ? 'Edit Admin Details' : 'Enter New Admin Details'}</h3>
            <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                <InputField label="First Name" name="firstName" value={formData.firstName} onChange={handleChange} placeholder={isEdit ? '@Fetched from Database' : 'First Name here...'} />
                <InputField label="Last Name" name="lastName" value={formData.lastName} onChange={handleChange} placeholder={isEdit ? '@Fetched from Database' : 'Last Name here...'} />
            </div>
            <InputField label="Email" name="email" type="email" value={formData.email} onChange={handleChange} placeholder={isEdit ? '@Fetched from Database' : 'Example@email.com'} />
            {!isEdit && <InputField label="Password" name="password" type="password" value={formData.password} onChange={handleChange} placeholder="Atleast 8 characters long..." />}
            <InputField label="Department ID" name="departmentId" value={formData.departmentId} onChange={handleChange} placeholder={isEdit ? '@Fetched from Database' : '20, 30 etc...'} />
            <InputField label="Phone Number" name="phone" type="tel" value={formData.phone} onChange={handleChange} placeholder={isEdit ? '@Fetched from Database' : '9876543210...'} />
            <InputField label="Date of Birth" name="dob" type="date" value={formData.dob} onChange={handleChange} placeholder="Date here" />
            <InputField label="Address" name="address" value={formData.address} onChange={handleChange} placeholder="Admin Address here...." />
            <div className="flex justify-end gap-4 pt-4">
                <button type="button" onClick={handleReset} className="px-6 py-2 bg-[#0d214f] text-white font-semibold rounded-lg shadow-md hover:bg-opacity-90 transition">Reset</button>
                <button type="submit" className="px-6 py-2 bg-green-600 text-white font-semibold rounded-lg shadow-md hover:bg-green-700 transition">Save</button>
            </div>
        </form>
    );
};

const InputField = ({ label, ...props }) => (
    <div>
        <label className="block text-sm font-medium text-gray-700 mb-1">{label}</label>
        <input {...props} className="w-full px-4 py-2 border border-gray-300 rounded-lg shadow-sm focus:ring-2 focus:ring-blue-500" required />
    </div>
);

// --- Edit Admin ID Prompt Modal ---
const EditPromptModal = ({ isOpen, onClose, onConfirm }) => {
    const [adminId, setAdminId] = useState('');
    const handleSubmit = () => {
        if (adminId.trim()) onConfirm(adminId);
        else alert('Please enter an Admin ID.');
    };
    return (
        <Modal isOpen={isOpen} onClose={onClose} size="sm">
            <div className="text-center">
                <h3 className="text-xl font-bold text-gray-800 mb-4">Edit Admin</h3>
                <InputField label="Enter Admin ID" value={adminId} onChange={(e) => setAdminId(e.target.value)} placeholder="Enter here ....." />
                <button onClick={handleSubmit} className="w-full mt-4 px-6 py-3 bg-green-600 text-white font-bold rounded-lg shadow-md hover:bg-green-700 transition">OK</button>
            </div>
        </Modal>
    );
};

// --- Main Admin Details Page Component ---
const AdminDetails = () => {
    const [admins, setAdmins] = useState(initialAdmins);
    const [modalState, setModalState] = useState({ type: null, data: null });

    const today = new Date().toLocaleDateString("en-US", { year: "numeric", month: "long", day: "numeric" });

    const handleAddAdmin = (newAdminData) => {
        const newAdmin = { ...newAdminData, id: `AD${Math.floor(1000000 + Math.random() * 9000000)}` };
        const isSuccess = Math.random() > 0.2; // Simulate success/failure
        if (isSuccess) {
            setAdmins(prev => [newAdmin, ...prev]);
            setModalState({ type: 'status', data: { success: true, title: 'Admin Added Successfully !!', id: newAdmin.id } });
        } else {
            setModalState({ type: 'status', data: { success: false, title: 'Failed to Add Admin !!', errorCode: 'E500_INTERNAL_ERROR' } });
        }
    };

    const handleEditPrompt = (adminId) => {
        const adminToEdit = admins.find(admin => admin.id === adminId);
        if (adminToEdit) {
            setModalState({ type: 'editForm', data: adminToEdit });
        } else {
            // Show failure pop-up if admin ID is not found
            setModalState({ type: 'status', data: { success: false, title: 'Failed to Find Admin !!', errorCode: 'E404_NOT_FOUND' } });
        }
    };

    const handleUpdateAdmin = (updatedData) => {
        setAdmins(prev => prev.map(admin => admin.id === modalState.data.id ? { ...admin, ...updatedData } : admin));
        setModalState({ type: null, data: null });
    };

    const handleDelete = (idToDelete) => {
        if (window.confirm(`Are you sure you want to delete admin with ID: ${idToDelete}?`)) {
            setAdmins(prev => prev.filter(admin => admin.id !== idToDelete));
        }
    };

    return (
        <div className="min-h-screen bg-gray-100 p-8">
            <div className="max-w-7xl mx-auto">
                <header className="mb-6">
                    <h1 className="text-4xl font-bold text-gray-800">Admin Details</h1>
                    <p className="text-md text-gray-500">{today}</p>
                </header>

                <div className="bg-white rounded-xl shadow-lg p-6">
                    <div className="flex justify-end gap-4 mb-6">
                        <button onClick={() => setModalState({ type: 'editPrompt' })} className="flex items-center gap-2 px-5 py-2 bg-[#0d214f] text-white font-semibold rounded-lg shadow-md hover:bg-opacity-90 transition">
                            <Edit size={18} /> Edit Admin
                        </button>
                        <button onClick={() => setModalState({ type: 'addForm' })} className="flex items-center gap-2 px-5 py-2 bg-[#0d214f] text-white font-semibold rounded-lg shadow-md hover:bg-opacity-90 transition">
                            <UserPlus size={18} /> Add New Admin
                        </button>
                    </div>

                    <div className="overflow-x-auto">
                        <table className="w-full border-collapse">
                            <thead>
                                <tr className="bg-[#0d214f] text-white text-left">
                                    <th className="p-3 font-semibold">Admin ID</th>
                                    <th className="p-3 font-semibold">Admin Name</th>
                                    <th className="p-3 font-semibold">Email</th>
                                    <th className="p-3 font-semibold">Department ID</th>
                                    <th className="p-3 font-semibold">Phone No</th>
                                    <th className="p-3 font-semibold text-center">Delete</th>
                                </tr>
                            </thead>
                            <tbody>
                                {admins.map((admin) => (
                                    <tr key={admin.id} className="border-b border-gray-200 hover:bg-gray-50">
                                        <td className="p-3 text-gray-700">{admin.id}</td>
                                        <td className="p-3 text-gray-900 font-medium">{`${admin.firstName} ${admin.lastName}`}</td>
                                        <td className="p-3 text-gray-700">{admin.email}</td>
                                        <td className="p-3 text-gray-700">{admin.departmentId}</td>
                                        <td className="p-3 text-gray-700">{admin.phone}</td>
                                        <td className="p-3 text-center">
                                            <button onClick={() => handleDelete(admin.id)} className="px-4 py-1 bg-red-600 text-white font-bold rounded-md hover:bg-red-700 transition flex items-center gap-1 mx-auto">
                                                <X size={16} /> Delete
                                            </button>
                                        </td>
                                    </tr>
                                ))}
                                {[...Array(Math.max(0, 5 - admins.length))].map((_, i) => (
                                    <tr key={`empty-${i}`} className="border-b border-gray-200 h-12"><td colSpan="6"></td></tr>
                                ))}
                            </tbody>
                        </table>
                    </div>
                </div>
            </div>

            {/* Modals */}
            <Modal isOpen={modalState.type === 'addForm'} onClose={() => setModalState({ type: null })}>
                <AdminForm onSave={handleAddAdmin} onCancel={() => setModalState({ type: null })} />
            </Modal>
            
            <EditPromptModal isOpen={modalState.type === 'editPrompt'} onClose={() => setModalState({ type: null })} onConfirm={handleEditPrompt} />

            <Modal isOpen={modalState.type === 'editForm'} onClose={() => setModalState({ type: null })}>
                <AdminForm isEdit={true} initialData={modalState.data} onSave={handleUpdateAdmin} onCancel={() => setModalState({ type: null })} />
            </Modal>
            
            {modalState.type === 'status' && (
                <StatusModal 
                    isOpen={true} 
                    onClose={() => setModalState({ type: null })} 
                    {...modalState.data} 
                />
            )}
        </div>
    );
};

export default AdminDetails;
